generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String                   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  invitations OrganizationInvitation[]
  projects    Project[]
  users       UserOrganization[]
}

model OrganizationInvitation {
  id             String           @id @default(cuid())
  email          String?
  organizationId String
  status         String           @default("PENDING")
  invitedById    String
  createdAt      DateTime         @default(now())
  expiresAt      DateTime
  token          String           @unique
  role           OrganizationRole @default(MEMBER)
  invitedBy      User             @relation("InvitedBy", fields: [invitedById], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id])

  @@index([email, organizationId])
}

model UserOrganization {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           OrganizationRole @default(MEMBER)
  organization   Organization     @relation(fields: [organizationId], references: [id])
  user           User             @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String                   @id @default(cuid())
  name            String?
  email           String?                  @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  isSubscribed    Boolean                  @default(true)
  level           Int                      @default(1)
  xp              Int                      @default(0)
  accounts        Account[]
  sentInvitations OrganizationInvitation[] @relation("InvitedBy")
  sessions        Session[]
  organizations   UserOrganization[]
  assignedTasks   KanbanTask[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organizationId String
  isDefault      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  modules        Module[]
  kanbanBoards   KanbanBoard[]

  @@index([organizationId])
}

model Module {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // Type de module (ex: "billing", "analytics", "crm", etc.)
  isActive    Boolean  @default(true)
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  settings    Json     @default("{}")

  @@index([projectId])
}

model KanbanBoard {
  id          String        @id @default(cuid())
  name        String
  description String?
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       KanbanTask[]
  statuses    KanbanStatus[]
  groups      KanbanGroup[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([projectId])
}

model KanbanStatus {
  id           String       @id @default(cuid())
  name         String
  color        String       @default("muted")
  order        Int
  boardId      String
  board        KanbanBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks        KanbanTask[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([boardId])
}

model KanbanGroup {
  id          String       @id @default(cuid())
  name        String
  color       String?
  boardId     String
  board       KanbanBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks       KanbanTask[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([boardId])
}

model KanbanTask {
  id              String       @id @default(cuid())
  title           String
  description     String?
  priority        TaskPriority @default(MEDIUM)
  plannedStartAt  DateTime?
  plannedEndAt    DateTime?
  actualStartAt   DateTime?
  actualEndAt     DateTime?
  durationSeconds Int? 
  boardId         String
  statusId        String
  groupId         String?
  assignedToId    String?
  board           KanbanBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  status          KanbanStatus @relation(fields: [statusId], references: [id])
  group           KanbanGroup? @relation(fields: [groupId], references: [id])
  assignedTo      User?        @relation(fields: [assignedToId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([boardId])
  @@index([statusId])
  @@index([groupId])
  @@index([assignedToId])
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
